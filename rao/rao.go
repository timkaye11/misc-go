package rao

import (
	"fmt"
	"math"
)

var Modulus float64

func SetModulus(mod float64) {
	Modulus = mod
}

func Statistic(obs []float64, alpha float64) float64 {
	u := 0.0
	n := len(obs)
	mu := Modulus / float64(n)
	if n < 2 {
		panic("too short")
	}

	for i := 1; i < n; i++ {
		u += math.Abs((obs[i] - obs[i-1]) - mu)
	}
	u /= 2.0

	fmt.Println(u)

	row := getRow(n)
	var p float64
	if alpha == 0.0 {
		if u > RaoTable[row][0] {
			p = 0.00001
		} else if u > RaoTable[row][1] {
			p = 0.0001
		} else if u > RaoTable[row][2] {
			p = 0.001
		} else if u > RaoTable[row][3] {
			p = 0.01
		} else {
			p = 0.1
		}
	} else {
		var idx int
		switch alpha {
		case 0.001:
			idx = 0
		case 0.01:
			idx = 1
		case 0.05:
			idx = 2
		case 0.1:
			idx = 3
		}
		p = RaoTable[row][idx]
	}

	return p
}

func getRow(n int) int {
	switch {
	case n <= 30:
		return n - 3
	case n <= 32:
		return 27
	case n <= 37:
		return 28
	case n <= 42:
		return 29
	case n <= 47:
		return 30
	case n <= 62:
		return 31
	case n <= 87:
		return 32
	case n <= 125:
		return 33
	case n <= 175:
		return 34
	case n <= 250:
		return 35
	case n <= 350:
		return 36
	case n <= 450:
		return 37
	case n <= 550:
		return 38
	case n <= 650:
		return 39
	case n <= 750:
		return 40
	case n <= 850:
		return 41
	case n <= 950:
		return 42
	default:
		return 43
	}
}

var RaoTable = [][]float64{
	{247.32, 221.14, 186.45, 168.02},
	{245.19, 211.93, 183.44, 168.66},
	{236.81, 206.79, 180.65, 166.3},
	{229.46, 202.55, 177.83, 165.05},
	{224.41, 198.46, 175.68, 163.56},
	{219.52, 195.27, 173.68, 162.36},
	{215.44, 192.37, 171.98, 161.23},
	{211.87, 189.88, 170.45, 160.24},
	{208.69, 187.66, 169.09, 159.33},
	{205.87, 185.68, 167.87, 158.5},
	{203.33, 183.9, 166.76, 157.75},
	{201.04, 182.28, 165.75, 157.06},
	{198.96, 180.81, 164.83, 156.43},
	{197.05, 179.46, 163.98, 155.84},
	{195.29, 178.22, 163.2, 155.29},
	{193.67, 177.08, 162.47, 154.78},
	{192.17, 176.01, 161.79, 154.31},
	{190.78, 175.02, 161.16, 153.86},
	{189.47, 174.1, 160.56, 153.44},
	{188.25, 173.23, 160.01, 153.05},
	{187.11, 172.41, 159.48, 152.68},
	{186.03, 171.64, 158.99, 152.32},
	{185.01, 170.92, 158.52, 151.99},
	{184.05, 170.23, 158.07, 151.67},
	{183.14, 169.58, 157.65, 151.37},
	{182.28, 168.96, 157.25, 151.08},
	{181.45, 168.38, 156.87, 150.8},
	{177.88, 165.81, 155.19, 149.59},
	{174.99, 163.73, 153.82, 148.6},
	{172.58, 162, 152.68, 147.76},
	{170.54, 160.53, 151.7, 147.05},
	{163.6, 155.49, 148.34, 144.56},
	{159.45, 152.46, 146.29, 143.03},
	{154.51, 148.84, 143.83, 141.18},
	{151.56, 146.67, 142.35, 140.06},
	{148.06, 144.09, 140.57, 138.71},
	{145.96, 142.54, 139.5, 137.89},
	{144.54, 141.48, 138.77, 137.33},
	{143.48, 140.7, 138.23, 136.91},
	{142.66, 140.09, 137.8, 136.59},
	{142, 139.6, 137.46, 136.33},
	{141.45, 139.19, 137.18, 136.11},
	{140.99, 138.84, 136.94, 135.92},
}
